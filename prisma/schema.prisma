// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// = env("TEST_DATABASE_URL") for testing
// = env("DATABASE_URL") for production
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  drivingLicense   Boolean    @default(false)
  dateOfBirth      DateTime?
  note             String?
  noteLonger       String?
  adminNote        String?
  isSenior         Boolean    @default(false)
  role             RoleEnum[]
  level            LevelEnum[]
  avatarUrl        String?    @default("testMan.jpg")
  activatedAccount Boolean    @default(false)
  deactivated      Boolean    @default(false)
  posts            Post[]     @relation(name: "PostAuthor")
  taggedPosts      Post[]     @relation("TaggedUsers")
  supervisedExams  Exam[]     @relation("ExamToSupervisor")
  invigilatedExams Exam[]     @relation("ExamToInvigilator")
  examinedExams    Exam[]     @relation("ExamToExaminer")
  responses        Response[]
  authorizations   Authorization[]
  files            File[]
  dayReports       DayReport[] @relation("UserToDayReports")
}

model DayOfExams {
  id                Int        @id @default(autoincrement())
  date              DateTime   @unique
  isForInvigilators Boolean
  isForExaminers    Boolean
  responses         Response[]
  exams             Exam[]
  isLocked          Boolean    @default(false)
}

model Response {
  id           Int          @id @default(autoincrement())
  dayOfExamsId Int
  dayOfExams   DayOfExams   @relation(fields: [dayOfExamsId], references: [id])
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  response     ResponseEnum @default(No)
  assigned     Boolean      @default(false)

  @@unique([dayOfExamsId, userId])
}

model Exam {
  id               Int             @id @default(autoincrement())
  location         String
  venue            String
  type             TypeOfExamEnum
  levels           LevelEnum[]
  startTime        DateTime
  endTime          DateTime
  note             String?
  supervisors      User[]          @relation("ExamToSupervisor")
  invigilators     User[]          @relation("ExamToInvigilator")
  examiners        User[]          @relation("ExamToExaminer")
  candidates       Candidate[]
  dayOfExamsId     Int
  dayOfExams       DayOfExams      @relation(fields: [dayOfExamsId], references: [id])
  pdfUrl           String?
  comments         String?
  issues           String?
  ScheduleForDayId Int?
  ScheduleForDay   ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
  dayReportId      Int?            @unique
  dayReport        DayReport?      @relation(name: "DayReportToExam", fields: [dayReportId], references: [id])
  files            File[]
}

model Candidate {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  dateOfBirth DateTime
  phone       String
  mockTest    Boolean    @default(false)
  paid        Boolean    @default(false)
  note        String?
  partnerId   Int?       @unique
  partner     Candidate? @relation("PartnerToCandidate", fields: [partnerId], references: [id])
  partneredBy Candidate? @relation("PartnerToCandidate")
  idForExam   Int?
  exams       Exam[]
  ScheduleId  Int?
  Schedule    Schedule?  @relation(fields: [ScheduleId], references: [id])
}

model ImportedCandidate {
  id           Int            @id @default(autoincrement())
  level        LevelEnum
  dateOfExam   DateTime
  location     String
  venue        String?
  candidateId  Int?
  typeOfExam   TypeOfExamEnum
  firstName    String
  lastName     String
  birthDate    DateTime
  email        String
  phone        String
  code         String?
  partner      String?
  mock         Boolean        @default(false)
  paid         Boolean        @default(false)
  orderId      Int?
  requirements String?
  crfToSchool  Boolean        @default(false)
  note         String?

  @@unique([firstName, lastName, birthDate, dateOfExam, location, typeOfExam, level])
}

model Schedule {
  id               Int             @id @default(autoincrement())
  startTime        DateTime
  endTime          DateTime
  candidates       Candidate[]
  ScheduleForDayId Int?
  ScheduleForDay   ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
}

model ScheduleForDay {
  id        Int        @id @default(autoincrement())
  date      DateTime
  schedules Schedule[]
  breaks    Break[]
  exams     Exam[]
}

model Break {
  id               Int             @id @default(autoincrement())
  startTime        DateTime
  endTime          DateTime
  ScheduleForDayId Int?
  ScheduleForDay   ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
}

model ExamLocation {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  venues ExamVenue[]
}

model ExamVenue {
  id         Int          @id @default(autoincrement())
  name       String
  locationId Int
  location   ExamLocation @relation(fields: [locationId], references: [id])
  gLink      String       @default("https://www.google.com/maps")

  @@unique([name, locationId])
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User        @relation(name: "PostAuthor", fields: [authorId], references: [id])
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  taggedUsers User[]      @relation("TaggedUsers")
  taggedRoles RoleEnum[]
  files       File[]
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post[]
  exam      Exam[]
}

model Authorization {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  code      String
}

model DayReport {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id], name: "UserToDayReports")
  exam      Exam?     @relation(name: "DayReportToExam")
}

enum RoleEnum {
  Office
  Supervisor
  Invigilator
  Developer
  Examiner
}

enum TypeOfExamEnum {
  Mock
  Paper
  Computer
  Speaking
  ComputerSpeaking
  PaperSpeaking
}

enum ResponseEnum {
  Yes
  AM
  PM
  No
}

enum LevelEnum {
  A1
  A2
  B1
  B2
  C1
  C2
}
