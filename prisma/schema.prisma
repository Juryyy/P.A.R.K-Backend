// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  drivingLicense Boolean @default(false)
  note      String?
  adminNote String?
  role      RoleEnum
  avatarUrl String? @default("testMan.jpg")
  activatedAccount  Boolean  @default(false)
  deactivated       Boolean  @default(false)

  supervisedExams Exam[] @relation("ExamToSupervisor") 
  invigilatedExams Exam[] @relation("ExamToInvigilator")
  examinedExams Exam[] @relation("ExamToExaminer")
  responses Response[]
}

model DayOfExams {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  isForInvigilators Boolean
  isForExaminers Boolean 
  responses  Response[]
  exams     Exam[]
}

model Response {
  id            Int         @id @default(autoincrement())
  dayOfExamsId  Int
  dayOfExams    DayOfExams  @relation(fields: [dayOfExamsId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  response      ResponseEnum @default(No)

  @@unique([dayOfExamsId, userId])
}

model Exam {
  id            Int      @id @default(autoincrement())
  location      String
  venue         String
  type          TypeOfExamEnum
  levels        LevelEnum[]
  startTime     DateTime
  endTime       DateTime
  note          String?
  supervisors   User[] @relation("ExamToSupervisor")
  invigilators  User[] @relation("ExamToInvigilator")
  examiners     User[] @relation("ExamToExaminer")
  candidates    Candidate[]
  dayOfExamsId  Int
  dayOfExams    DayOfExams @relation(fields: [dayOfExamsId], references: [id])
  pdfUrl        String?
  comments      String?
  issues        String?
  ScheduleForDayId Int?
  ScheduleForDay ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
}

model Candidate {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  dateOfBirth DateTime
  phone     String
  mockTest  Boolean @default(false)
  paid      Boolean @default(false)
  note      String?
  partnerId Int? @unique
  partner   Candidate? @relation("PartnerToCandidate", fields: [partnerId], references: [id])
  partneredBy Candidate? @relation("PartnerToCandidate")
  idForExam Int?
  exams     Exam[]
  ScheduleId Int?
  Schedule   Schedule? @relation(fields: [ScheduleId], references: [id])
}

model Schedule {
  id          Int      @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  candidates  Candidate[]
  ScheduleForDayId Int?
  ScheduleForDay ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
}

model ScheduleForDay {
  id          Int      @id @default(autoincrement())
  date        DateTime
  schedules   Schedule[]
  breaks      Break[]
  exams       Exam[]
}

model Break {
  id          Int      @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  ScheduleForDayId Int?
  ScheduleForDay ScheduleForDay? @relation(fields: [ScheduleForDayId], references: [id])
}

enum RoleEnum {
  Office
  Supervisor
  SeniorSupervisor
  Invigilator
  SeniorInvigilator
  Tech
  Examiner
}

enum TypeOfExamEnum {
  Mock
  Paper
  Computer
  Speaking
  ComputerSpeaking
  PaperSpeaking
}

enum ResponseEnum {
  Yes
  No
  Maybe
}

enum LevelEnum {
  A1
  A2
  B1
  B2
  C1
  C2
}